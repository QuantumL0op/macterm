
                     How to Build MacTelnet            2006-03-27

PREREQUISITES
  Although in the past MacTelnet has used MPW and CodeWarrior,
  now only Xcode is supported.  In addition, the latest version
  of Mac OS X should be used to build (regardless of target OS)
  because the build system is not maintained for older releases.
  
  MacTelnet 3.1 is implemented as a C++ framework that is loaded
  into Python.  This is accomplished with the Simple Wrapper
  Interface Generator (SWIG), which you must download and build
  separately; look at "Build/Tools/MacTelnetSwigConfig.sh".  You
  need at least SWIG 1.3.31 to support the Python 2.5 in Leopard,
  but SWIG 1.3.29 for the Python 2.3.x in earlier versions.  See
  "Build/Shared/CustomPaths.xcconfig" for a variable that sets
  where SWIG is (/opt/swig-<version>/bin/swig by default).
  
  To enable notifications with Growl (http://www.growl.info/),
  you need to download the SDK from that site.  It is expected to
  exist in a directory "GrowlSDK" in the "Build" directory (see
  "Build/Shared/CustomPaths.xcconfig" for this reference).
  
  When building source code documentation only, you will need
  Doxygen (http://www.doxygen.org/), and Dot (part of GraphViz,
  http://www.graphviz.org/), and using doxypy for the Quills API
  documentation is recommended (http://code.foosel.org/doxypy).

UNDERSTANDING THE DIRECTORY STRUCTURE
  The components of the project are in a few main folders:
    Licenses/
        Source code licenses.  Please see _Licenses.txt.
    Build/
        Source code for all components and documentation, and the
        scripts required to build them.  The top level has Xcode
        projects and/or build scripts for each component.  In
        addition, files used by more than one component are in
        Build/Shared/.
    Debug/
        Scripts that simplify MacTelnet debugging in "gdb".

HOW TO BUILD
  The MacTelnet.app bundle is constructed using a makefile, since
  it has an unusual file layout.  However, Xcode is still called
  by the makefile to do builds and cleans; so if a build was
  initiated from the GUI, those results will be used by "make".
  
  There are a few ways to do builds, and they are equivalent:
  - Use "Build/Application.xcodeproj".  The "Everything" target
    just runs the makefile to create the entire bundle.  You can
    build components separately to save time during development.
  - Run "Build/_MacTelnetBuild.command" from the Finder.
  - Run "make" from the Build directory, in a shell window.
  
  You can clean in the usual ways (i.e. the Clean command on the
  "Everything" target, or "make clean").
  
  If Xcode's GUI is used to initiate builds, you should generally
  choose the lowest configuration (i.e. "ForPantherDebug").  This
  has two important benefits:
  1. You can quickly see problems with unavailable APIs, and fix
     them with conditionals.
  2. More important, you will not stumble on unsupported build
     configurations.  For instance, Quills.framework does support
     "ForTigerDebug", but *does not* support "ForLeopardDebug"
     (it relies on binary compatibility to support Leopard).  The
     unifying makefile explicitly requests only configurations
     that are necessary.

HOW TO CUSTOMIZE THE BUILD
  It is possible to tweak the makefile or environment to change
  what is built.  MacTelnet is fairly robust about running with
  components missing, so you can disable things you don't want
  (e.g. support for older Mac OS X versions, extra applications
  and frameworks, help files).
  
  Run "make help" from the Build directory to see options that
  can be tweaked through the command line.  Other settings may
  require GNUmakefile edits or changes to the .xcconfig files.
  
  NOTE: The SWIG wrappers are currently rebuilt pessimistically
  through "FORCE" rules in the GNUmakefile, to guarantee that
  they reflect any code changes.  However, in practice, these
  take a long time to compile and rarely change.  You may wish
  to disable the "FORCE" dependencies in the GNUmakefile (one
  per SWIG platform) if you are not changing Quills code.

                                     Kevin Grant (kevin@ieee.org)
                                        Lead Developer, MacTelnet
