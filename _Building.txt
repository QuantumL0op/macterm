
                     How to Build MacTelnet            2006-03-27

PREREQUISITES
  Although in the past MacTelnet has used MPW and CodeWarrior,
  now only Xcode is supported.  In addition, the latest version
  of Mac OS X should be used to build (regardless of target OS)
  because the build system is not maintained for older releases.
  
  MacTelnet 3.1 is implemented as a C++ framework that is loaded
  into Python.  This is accomplished with the Simple Wrapper
  Interface Generator (SWIG), which you must download and build
  separately; look at "Build/Tools/MacTelnetSwigConfig.sh".  You
  need at least SWIG 1.3.31 to support the Python 2.5 in Leopard,
  but SWIG 1.3.29 for the Python 2.3.x in earlier versions.  See
  the Application.xcodeproj configuration for a variable that
  sets where SWIG is (/opt/swig-<version>/bin/swig by default).
  
  When building source code documentation only, you will need
  Doxygen (http://www.doxygen.org/), and Dot (part of GraphViz,
  http://www.graphviz.org/), and using doxypy for the Quills API
  documentation is recommended (http://code.foosel.org/doxypy).

UNDERSTANDING THE DIRECTORY STRUCTURE
  The components of the project are in a few main folders:
    Licenses/
        Source code licenses.  Please see _Licenses.txt.
    Build/
        Source code for all components and documentation, and the
        scripts required to build them.  The top level has Xcode
        projects and/or build scripts for each component.  In
        addition, files used by more than one component are in
        Build/Shared/.
    Debug/
        Scripts that simplify MacTelnet debugging in "gdb".

HOW TO BUILD
  The MacTelnet.app bundle is composed of several things that are
  all created automatically by running "make" from the Build
  directory (or opening the Build/_MacTelnetBuild.command file in
  the Finder, which has the same effect).
  
  You can customize what is built by passing parameters to the
  make (e.g. "FOR_PANTHER=no"), or by editing Build/GNUmakefile
  and to some extent the Build/Application.xcodeproj project.
  MacTelnet is fairly robust in terms of running with missing
  components, so you can disable many things that you are not
  interested in using.

                                     Kevin Grant (kevin@ieee.org)
                                        Lead Developer, MacTelnet
