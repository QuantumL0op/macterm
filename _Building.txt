
                      How to Build MacTerm             2009-09-03

PREREQUISITES
  Build with the latest OS X and the most recent Xcode.
  
  Currently, MacTerm requires the 10.6 SDK, which is not included
  with Xcode anymore.  Download the SDK separately from Apple's
  developer site, and put the "MacOSX10.6.sdk" directory in the
  following location (alongside other SDKs):
      /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/
  (Unfortunately, even minor App Store updates to Xcode will
  obliterate manually-copied SDKs.  This process must be repeated
  if Xcode is updated!  Keeping a side copy of the 10.6 SDK is
  advisable.)
  
  Work is being done to adopt more recent SDKs; the primary issue
  is that the 10.7 SDK abandons all Carbon APIs.  Many parts of
  MacTerm have switched to Cocoa, and MacTerm can even *call*
  APIs from later SDKs (see "Build/Shared/Code/CocoaFuture.*").
  Unfortunately the most important view is the terminal itself,
  and until its many Carbon and QuickDraw dependencies can be
  replaced there is no feasible way to upgrade the default SDK.
  
  By default MacTerm compiles in support for Growl notifications
  (http://www.growl.info/) so a default build requires the SDK
  from that site.  It is expected to exist in a directory named
  "GrowlSDK" under the "Build" directory (for this reference and
  other dependencies, see "Build/Shared/CustomPaths.xcconfig").
  If you wish to disable Growl support you may do so by invoking
  the Build/GNUmakefile directly but you cannot easily do this
  when building from Xcode.
  
  MacTerm is implemented as a C++ framework that is loaded into
  Python.  This is accomplished with the Simple Wrapper Interface
  Generator (SWIG), which you must download and build separately;
  look at "Build/Tools/SwigConfig.sh".  The latest version of
  SWIG is recommended (the 3.x series was tested recently).  See
  "Build/Shared/CustomPaths.xcconfig" for a variable that sets
  the install path (/opt/swig-<version>/bin/swig by default).
  
  Note that the build system only uses artwork from a component's
  Resources directory (such as "Build/Application/Resources").
  If you decide to modify any of the source artwork files located
  in directories like "Build/Application/Artwork", you will need
  to manually perform PNG exports, run Icon Composer or otherwise
  generate the required file format in the appropriate Resources
  directory before your changes will be visible in MacTerm.
  Files of type ".xcf" were created using Seashore; those of type
  ".pxm" were created using Pixelmator.
  
  When building source code documentation only, you will need
  Doxygen (http://www.doxygen.org/), and Dot (part of GraphViz,
  http://www.graphviz.org/).  Also, doxypy for the Quills API
  documentation is recommended (http://code.foosel.org/doxypy).

UNDERSTANDING THE DIRECTORY STRUCTURE
  The components of the project are in a few main folders:
    Licenses/
        Source code licenses.  Please see _Licenses.txt.
    Build/
        Source code for all components and documentation, and the
        scripts required to build them.  The top level has Xcode
        projects and/or build scripts for each component.  Files
        used by more than one component are in Build/Shared/.
    Debug/
        Scripts that simplify MacTerm debugging.

HOW TO BUILD
  The MacTerm.app bundle has an unusual file layout so it is
  constructed by a makefile.
  
  There are a few ways to do builds, and they are equivalent:
  - Use "Build/Application.xcodeproj".  The "Everything" target
    just runs the makefile to create the entire bundle.  You can
    build components separately to save time during development.
  - Run "Build/_MacTermBuild.command" from the Finder.
  - Run "make" from the Build directory, in a shell window.  If
    you build in this way, your environment or command line can
    include settings that customize the build.
  
  You can clean in the usual ways (i.e. the Clean command on the
  "Everything" target, or "make clean").  Note also that since
  the vast majority of files go into "Build/_Generated", it is
  often enough to simply trash that folder.
  
  IMPORTANT: The build system currently will only rebuild Python
  wrappers when the SWIG file "Quills.i" is changed, even though
  this is NOT the only file affecting wrappers.  In particular,
  if you ever change Quills*.{cp,h}, you should also "touch"
  Quills.i so that the wrapper is rebuilt with your changes.

HOW TO CUSTOMIZE THE BUILD
  It is possible to tweak the makefile or environment to change
  what is built.
  
  Run "make help" from the Build directory to see options that
  can be tweaked through the command line.  Other settings may
  require GNUmakefile edits or changes to the .xcconfig files.

                                        Kevin Grant (kmg@mac.com)
                                        Lead Developer, MacTerm
