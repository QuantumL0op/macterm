#!/bin/sh

# RunSwig.sh
#
# Runs the SWIG program to construct source code out of a SWIG
# interface file (ultimately for Python).
#
# This script exists to act as an interface to Xcode build rules,
# and to correct some stupid things that SWIG does.
#
# Kevin Grant (kevin@ieee.org)
# December 13, 2007

if [ "x${DERIVED_FILES_DIR}" = "x" ] ; then
    echo "$0: run this only from Xcode" >&2
    exit 1
fi

swig=${SWIG_PREFIX}/bin/swig
if [ "x${SWIG}" != "x" ] ; then
    swig=${SWIG}
fi

# change to the target directory, because SWIG annoyingly
# generates the *.cxx file in the current directory even if
# options like -outdir are given to redirect other files
cd "${DERIVED_FILES_DIR}"
if [ "x$?" != "x0" ] ; then
    echo "$0: unable to change to ${DERIVED_FILES_DIR}" >&2
    exit 1
fi

# throw away any previous files
rm -f \
${INPUT_FILE_BASE}_wrap.cxx \
${INPUT_FILE_BASE}_wrap.cxx.NEW \
;

# construct the Python code and C++ wrapper code
${swig} ${1+"$@"}
if [ "x$?" != "x0" ] ; then
    echo "$0: SWIG failed" >&2
    exit 1
fi

# now patch SWIG output, to fix certain problems
rm -f ${INPUT_FILE_BASE}_wrap.cxx.NEW
touch ${INPUT_FILE_BASE}_wrap.cxx.NEW
if [ "x${SWIG_VERSION}" = "x1.3.29" ] ; then
    # certain includes are missing in output from this version
    echo "#include <string.h>" >> ${INPUT_FILE_BASE}_wrap.cxx.NEW
    echo "#include <math.h>" >> ${INPUT_FILE_BASE}_wrap.cxx.NEW
fi
# Apple's AvailabilityMacros.h file defines a stupidly-named
# macro, check(), that clobbers a method of the same name in
# output generated by SWIG; so, throw this macro away
printf "#ifdef check\n#undef check\n#endif\n" >> ${INPUT_FILE_BASE}_wrap.cxx.NEW
cat ${INPUT_FILE_BASE}_wrap.cxx >> ${INPUT_FILE_BASE}_wrap.cxx.NEW
if [ "x$?" != "x0" ] ; then
    echo "$0: no generated C++ file found" >&2
    exit 1
fi
mv ${INPUT_FILE_BASE}_wrap.cxx.NEW ${INPUT_FILE_BASE}_wrap.cxx

