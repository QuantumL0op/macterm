%define DOCSTRING
"The `Quills` module exposes the entire MacTelnet API to Python,
allowing you to directly access core functionality from scripts!"
%enddef

%module(docstring=DOCSTRING) Quills

%include "stl.i"

// instantiate template types relied upon by Quills
%template(_float_list) std::vector< double >;
%template(_string_list) std::vector< std::string >;

// IMPORTANT: The above %template instantiations MUST be declared prior
// to any #includes that may directly or indirectly use system headers.
// This is because Apple’s "AssertMacros.h" contains errant #define
// macros that corrupt C++ code generated by SWIG - see rdar://4700324
// for more on this.  If the SWIG code is put first, it compiles.

// enable callbacks to be written in Python
#ifdef SWIGPYTHON
%typemap(in) PyObject* inPythonFunction
{
	if (false == PyCallable_Check($input))
	{
		PyErr_SetString(PyExc_TypeError, "Parameter is not a function");
		return NULL;
	}
	$1 = $input;
}
#endif

// enable callbacks that take a single string argument and return nothing
#ifdef SWIGPYTHON
%{
static void
CallPythonStringReturnVoid	(void*	inPythonFunctionObject,
							 char*	inoutString)
{
	PyObject*	pythonDef = NULL;
	PyObject*	arguments = NULL;	
	PyObject*	pythonResult = NULL;
	
	
	pythonDef = reinterpret_cast< PyObject* >(inPythonFunctionObject);
	arguments = Py_BuildValue("(s)", inoutString);
	assert(NULL != arguments);
	pythonResult = PyEval_CallObject(pythonDef, arguments); // call Python
	Py_DECREF(arguments), arguments = NULL;
	Py_XDECREF(pythonResult), pythonResult = NULL;
}
%}
#endif

// enable callbacks that take a single string argument and return a string
#ifdef SWIGPYTHON
%{
static std::string
CallPythonStringReturnString	(void*	inPythonFunctionObject,
								 char*	inoutString)
{
	PyObject*		pythonDef = NULL;
	PyObject*		arguments = NULL;	
	PyObject*		pythonResult = NULL;
	std::string		result;
	
	
	pythonDef = reinterpret_cast< PyObject* >(inPythonFunctionObject);
	arguments = Py_BuildValue("(s)", inoutString);
	assert(NULL != arguments);
	pythonResult = PyEval_CallObject(pythonDef, arguments); // call Python
	Py_DECREF(arguments), arguments = NULL;
	if (NULL != pythonResult)
	{
		char const*		stringPtr = NULL;
		
		
		if (false == PyString_CheckExact(pythonResult))
		{
			PyErr_SetString(PyExc_TypeError, "Callback did not return a string");
			return NULL;
		}
		
		stringPtr = PyString_AsString(pythonResult);
		result = stringPtr;
	}
	Py_XDECREF(pythonResult), pythonResult = NULL;
	
	return result;
}
%}
#endif

// enable callbacks that take no arguments and return nothing
#ifdef SWIGPYTHON
%{
static void
CallPythonVoidReturnVoid	(void*	inPythonFunctionObject)
{
	PyObject*	pythonDef = NULL;
	PyObject*	arguments = NULL;	
	PyObject*	pythonResult = NULL;
	
	
	pythonDef = reinterpret_cast< PyObject* >(inPythonFunctionObject);
	//arguments = Py_BuildValue("{items}");
	pythonResult = PyEval_CallObject(pythonDef, arguments); // call Python
	//Py_DECREF(arguments), arguments = NULL;
	Py_XDECREF(pythonResult), pythonResult = NULL;
}
%}
#endif

// NOTE: Quills headers are the only MacTelnet headers designed to
// interact with SWIG.  They also define the entire Python API for
// MacTelnet in an organized way.  Try not to include other headers here.

// WARNING: Currently, PythonWrapper/GNUmakefile assumes the list of
// dependencies below.  If you add more includes, you should ensure the
// makefile will realize they are dependencies of the wrapper build.

%{
#include <QuillsBase.h>
#include <QuillsEvents.h>
#include <QuillsPrefs.h>
#include <QuillsSession.h>
#include <QuillsTerminal.h>
%}

// auto-generate standard first lines for each function docstring
// (basically, the function name, arguments and any return type);
// any additional %feature("docstring", ...) lines will ADD to
// the automatically generated lines caused by the statement below
%feature("autodoc", "0");

// declare C++ APIs that should be exposed to Python
%include <QuillsBase.h>
%include <QuillsEvents.h>
%include <QuillsPrefs.h>
%include <QuillsSession.h>
%include <QuillsTerminal.h>

// BELOW IS REQUIRED NEWLINE TO END FILE
