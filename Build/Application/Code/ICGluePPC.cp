/* •••Start Header••• */

/* File:         PPC_ICAPI.c
 * Generated by: 1.0d4
 * For:          IC 1.3
 * On:           Sunday, 14 July 1996, 20:19:55
 * 
 * This file is part of the Internet Configuration system and
 * is placed in the public domain for the benefit of all.
 *
 * 10/9/1999 - Kevin Grant
 *				Modified the component calls for Carbon compliance
 *				and changed ICErrors to OSStatus
 */

/* •••End Header••• */

#include "UniversalDefines.h"

// Mac includes
#include <ApplicationServices/ApplicationServices.h>
#include <CoreServices/CoreServices.h>

#pragma options align=mac68k



#pragma mark Constants

enum
{
	uppCallComponentProcInfo = kPascalStackBased |
								RESULT_SIZE(kFourByteCode) |
								STACK_ROUTINE_PARAMETER(1, kFourByteCode)
};

//
// internal methods
//

static pascal OSStatus	callComponentUPP	(ICInstance				inComponentInstance,
											 ComponentParameters*	inParamsPtr);



//
// public methods
//

#if TARGET_API_MAC_OS8

pascal OSStatus ICStart(ICInstance *inst, OSType creator)
{
  OSStatus junk;
  OSStatus err;
  long response;
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    OSType creator;
    ICInstance inst;
  } params;
  
  *inst = nil;
  if (Gestalt(gestaltComponentMgr, &response) == noErr) {
    *inst = (ICInstance) OpenDefaultComponent(kICComponentType, kICComponentSubType);
  };
  if (*inst == nil) {
    err = badComponentInstance;
  } else {
    params.param_flags = 0;
    params.param_size = 4;
    params.param_what = 0x00;
    params.creator = creator;
    params.inst = *inst;
	err = callComponentUPP(params.inst, (ComponentParameters*)&params);
    if (err != noErr) {
      junk = CloseComponent((ComponentInstance) *inst);
      *inst = nil;
    };
  };
  return(err);
}

pascal OSStatus ICCStart(ComponentInstance *inst, OSType creator)
{
	return (ICStart((ICInstance*)inst, creator));
}

pascal OSStatus ICStop(ICInstance inst)
{
  OSStatus err;
  OSStatus err2;
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    ICInstance inst;
  } params;
  
  params.param_flags = 0;
  params.param_size = 0;
  params.param_what = 0x01;
  params.inst = inst;
  err = callComponentUPP(params.inst, (ComponentParameters*)&params);
  err2 = CloseComponent((ComponentInstance) inst);
  if (err == noErr) {
    err = err2;
  };
  return(err);
}

pascal OSStatus ICCStop(ComponentInstance inst)
{
	return (ICStop((ICInstance)inst));
}

// MacTelnet 3.0 - changed Ptr to ComponentInstance
pascal OSStatus ICGetComponentInstance(ICInstance inst, ComponentInstance *component_inst)
{
	*component_inst = (ComponentInstance)inst;
	return (noErr);
}

// MacTelnet 3.0 - changed Ptr to ComponentInstance
pascal OSStatus ICCGetComponentInstance(ComponentInstance inst, ComponentInstance *component_inst)
{
	return (ICGetComponentInstance((ICInstance)inst, component_inst));
}

#endif

/* •••Start PPC_ICAPI.c••• */

/* ***** Starting Up and Shutting Down ***** */

/* ***** Specifying a Configuration ***** */

pascal OSStatus ICFindConfigFile(ICInstance inst, short count, ICDirSpecArrayPtr folders)
{
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    ICDirSpecArrayPtr folders;
    short count;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 6;
  params.param_what = 2;
  /* routine specific assignments */
  params.folders = folders;
  params.count = count;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICFindConfigFile */

#if TARGET_API_MAC_OS8

pascal OSStatus ICCFindConfigFile(ComponentInstance inst, short count, ICDirSpecArrayPtr folders)
{
  return(ICFindConfigFile((ICInstance)inst, count, folders));
} /* ICCFindConfigFile */

pascal OSStatus ICFindUserConfigFile(ICInstance inst, ICDirSpec *where)
{
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    ICDirSpec *where;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 4;
  params.param_what = 14;
  /* routine specific assignments */
  params.where = where;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICFindUserConfigFile */

pascal OSStatus ICCFindUserConfigFile(ComponentInstance inst, ICDirSpec *where)
{
  return(ICFindUserConfigFile((ICInstance)inst, where));
} /* ICCFindUserConfigFile */

pascal OSStatus ICGeneralFindConfigFile(ICInstance inst, Boolean search_prefs, Boolean can_create, short count, ICDirSpecArrayPtr folders)
{
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    ICDirSpecArrayPtr folders;
    short count;
    Boolean can_create;
    char filler1;
    Boolean search_prefs;
    char filler0;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 10;
  params.param_what = 30;
  /* routine specific assignments */
  params.folders = folders;
  params.count = count;
  params.can_create = can_create;
  params.search_prefs = search_prefs;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGeneralFindConfigFile */

pascal OSStatus ICCGeneralFindConfigFile(ComponentInstance inst, Boolean search_prefs, Boolean can_create, short count, ICDirSpecArrayPtr folders)
{
  return(ICGeneralFindConfigFile((ICInstance)inst, search_prefs, can_create, count, folders));
} /* ICCGeneralFindConfigFile */

pascal OSStatus ICChooseConfig(ICInstance inst)
{
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    /* nothing to declare */
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 0;
  params.param_what = 33;
  /* routine specific assignments */
  /* nothing to do */
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICChooseConfig */

pascal OSStatus ICCChooseConfig(ComponentInstance inst)
{
  return(ICChooseConfig((ICInstance)inst));
} /* ICCChooseConfig */

pascal OSStatus ICChooseNewConfig(ICInstance inst)
{
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    /* nothing to declare */
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 0;
  params.param_what = 34;
  /* routine specific assignments */
  /* nothing to do */
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICChooseNewConfig */

pascal OSStatus ICCChooseNewConfig(ComponentInstance inst)
{
  return(ICChooseNewConfig((ICInstance)inst));
} /* ICCChooseNewConfig */

pascal OSStatus ICGetConfigName(ICInstance inst, Boolean longname, Str255 name)
{
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    StringPtr name;
    Boolean longname;
    char filler0;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 6;
  params.param_what = 35;
  /* routine specific assignments */
  params.name = name;
  params.longname = longname;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGetConfigName */

pascal OSStatus ICCGetConfigName(ComponentInstance inst, Boolean longname, Str255 name)
{
  return(ICGetConfigName((ICInstance)inst, longname, name));
} /* ICCGetConfigName */

pascal OSStatus ICGetConfigReference(ICInstance inst, ICConfigRefHandle ref)
{
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    ICConfigRefHandle ref;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 4;
  params.param_what = 31;
  /* routine specific assignments */
  params.ref = ref;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGetConfigReference */

pascal OSStatus ICCGetConfigReference(ComponentInstance inst, ICConfigRefHandle ref)
{
  return(ICGetConfigReference((ICInstance)inst, ref));
} /* ICCGetConfigReference */

pascal OSStatus ICSetConfigReference(ICInstance inst, ICConfigRefHandle ref, long flags)
{
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    long flags;
    ICConfigRefHandle ref;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 8;
  params.param_what = 32;
  /* routine specific assignments */
  params.flags = flags;
  params.ref = ref;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICSetConfigReference */

pascal OSStatus ICCSetConfigReference(ComponentInstance inst, ICConfigRefHandle ref, long flags)
{
  return(ICSetConfigReference((ICInstance)inst, ref, flags));
} /* ICCSetConfigReference */

pascal OSStatus ICSpecifyConfigFile(ICInstance inst, FSSpec *config)
{
  struct {
    UInt8 param_flags;
    UInt8 param_size;
    short param_what;
    FSSpec *config;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 4;
  params.param_what = 3;
  /* routine specific assignments */
  params.config = config;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICSpecifyConfigFile */

pascal OSStatus ICCSpecifyConfigFile(ComponentInstance inst, FSSpec *config)
{
  return(ICSpecifyConfigFile((ICInstance)inst, config));
} /* ICCSpecifyConfigFile */

/* ***** Getting Information ***** */

pascal OSStatus ICGetSeed(ICInstance inst, long *seed)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    long *seed;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 4;
  params.param_what = 4;
  /* routine specific assignments */
  params.seed = seed;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGetSeed */

pascal OSStatus ICCGetSeed(ComponentInstance inst, long *seed)
{
  return(ICGetSeed((ICInstance)inst, seed));
} /* ICCGetSeed */

pascal OSStatus ICGetPerm(ICInstance inst, ICPerm *perm)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICPerm *perm;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 4;
  params.param_what = 13;
  /* routine specific assignments */
  params.perm = perm;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGetPerm */

pascal OSStatus ICCGetPerm(ComponentInstance inst, ICPerm *perm)
{
  return(ICGetPerm((ICInstance)inst, perm));
} /* ICCGetPerm */

pascal OSStatus ICDefaultFileName(ICInstance inst, Str63 name)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    StringPtr name;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 4;
  params.param_what = 11;
  /* routine specific assignments */
  params.name = name;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICDefaultFileName */

pascal OSStatus ICCDefaultFileName(ComponentInstance inst, Str63 name)
{
  return(ICDefaultFileName((ICInstance)inst, name));
} /* ICCDefaultFileName */

/* ***** Reading and Writing Preferences ***** */

pascal OSStatus ICBegin(ICInstance inst, ICPerm perm)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICPerm perm;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 2;
  params.param_what = 5;
  /* routine specific assignments */
  params.perm = perm;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICBegin */

pascal OSStatus ICCBegin(ComponentInstance inst, ICPerm perm)
{
  return(ICBegin((ICInstance)inst, perm));
} /* ICCBegin */

pascal OSStatus ICGetPref(ICInstance inst, ConstStr255Param key, ICAttr *attr, void* buf, long *size)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    long *size;
    Ptr buf;
    ICAttr *attr;
    StringPtr key;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 16;
  params.param_what = 6;
  /* routine specific assignments */
  params.size = size;
  params.buf = (Ptr)buf;
  params.attr = attr;
  params.key = (StringPtr) key;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGetPref */

pascal OSStatus ICCGetPref(ComponentInstance inst, ConstStr255Param key, ICAttr *attr, Ptr buf, long *size)
{
  return(ICGetPref((ICInstance)inst, key, attr, buf, size));
} /* ICCGetPref */

pascal OSStatus ICSetPref(ICInstance inst, ConstStr255Param key, ICAttr attr, void const* buf, long size)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    long size;
    void const* buf;
    ICAttr attr;
    StringPtr key;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 16;
  params.param_what = 7;
  /* routine specific assignments */
  params.size = size;
  params.buf = buf;
  params.attr = attr;
  params.key = (StringPtr) key;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICSetPref */

pascal OSStatus ICCSetPref(ComponentInstance inst, ConstStr255Param key, ICAttr attr, Ptr buf, long size)
{
  return(ICSetPref((ICInstance)inst, key, attr, buf, size));
} /* ICCSetPref */

pascal OSStatus ICFindPrefHandle(ICInstance inst, ConstStr255Param key, ICAttr *attr, Handle prefh)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    Handle prefh;
    ICAttr *attr;
    StringPtr key;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 12;
  params.param_what = 36;
  /* routine specific assignments */
  params.prefh = prefh;
  params.attr = attr;
  params.key = (StringPtr) key;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICFindPrefHandle */

pascal OSStatus ICCFindPrefHandle(ComponentInstance inst, ConstStr255Param key, ICAttr *attr, Handle prefh)
{
  return(ICFindPrefHandle((ICInstance)inst, key, attr, prefh));
} /* ICCFindPrefHandle */

pascal OSStatus ICGetPrefHandle(ICInstance inst, ConstStr255Param key, ICAttr *attr, Handle *prefh)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    Handle *prefh;
    ICAttr *attr;
    StringPtr key;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 12;
  params.param_what = 26;
  /* routine specific assignments */
  params.prefh = prefh;
  params.attr = attr;
  params.key = (StringPtr) key;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGetPrefHandle */

pascal OSStatus ICCGetPrefHandle(ComponentInstance inst, ConstStr255Param key, ICAttr *attr, Handle *prefh)
{
  return(ICGetPrefHandle((ICInstance)inst, key, attr, prefh));
} /* ICCGetPrefHandle */

pascal OSStatus ICSetPrefHandle(ICInstance inst, ConstStr255Param key, ICAttr attr, Handle prefh)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    Handle prefh;
    ICAttr attr;
    StringPtr key;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 12;
  params.param_what = 27;
  /* routine specific assignments */
  params.prefh = prefh;
  params.attr = attr;
  params.key = (StringPtr) key;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICSetPrefHandle */

pascal OSStatus ICCSetPrefHandle(ComponentInstance inst, ConstStr255Param key, ICAttr attr, Handle prefh)
{
  return(ICSetPrefHandle((ICInstance)inst, key, attr, prefh));
} /* ICCSetPrefHandle */

pascal OSStatus ICCountPref(ICInstance inst, long *count)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    long *count;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 4;
  params.param_what = 8;
  /* routine specific assignments */
  params.count = count;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICCountPref */

pascal OSStatus ICCCountPref(ComponentInstance inst, long *count)
{
  return(ICCountPref((ICInstance)inst, count));
} /* ICCCountPref */

pascal OSStatus ICGetIndPref(ICInstance inst, long n, Str255 key)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    StringPtr key;
    long n;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 8;
  params.param_what = 9;
  /* routine specific assignments */
  params.key = key;
  params.n = n;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGetIndPref */

pascal OSStatus ICCGetIndPref(ComponentInstance inst, long n, Str255 key)
{
  return(ICGetIndPref((ICInstance)inst, n, key));
} /* ICCGetIndPref */

pascal OSStatus ICDeletePref(ICInstance inst, ConstStr255Param key)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    StringPtr key;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 4;
  params.param_what = 12;
  /* routine specific assignments */
  params.key = (StringPtr) key;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICDeletePref */

pascal OSStatus ICCDeletePref(ComponentInstance inst, ConstStr255Param key)
{
  return(ICDeletePref((ICInstance)inst, key));
} /* ICCDeletePref */

pascal OSStatus ICEnd(ICInstance inst)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    /* nothing to declare */
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 0;
  params.param_what = 10;
  /* routine specific assignments */
  /* nothing to do */
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICEnd */

pascal OSStatus ICCEnd(ComponentInstance inst)
{
  return(ICEnd((ICInstance)inst));
} /* ICCEnd */

/* ***** User Interface Stuff ***** */

pascal OSStatus ICEditPreferences(ICInstance inst, ConstStr255Param key)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    StringPtr key;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 4;
  params.param_what = 15;
  /* routine specific assignments */
  params.key = (StringPtr) key;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICEditPreferences */

pascal OSStatus ICCEditPreferences(ComponentInstance inst, ConstStr255Param key)
{
  return(ICEditPreferences((ICInstance)inst, key));
} /* ICCEditPreferences */

/* ***** URL Handling ***** */

pascal OSStatus ICParseURL(ICInstance inst, ConstStr255Param hint, void const* data, long len, long *selStart, long *selEnd, Handle url)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    Handle url;
    long *selEnd;
    long *selStart;
    long len;
    void const* data;
    StringPtr hint;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 24;
  params.param_what = 16;
  /* routine specific assignments */
  params.url = url;
  params.selEnd = selEnd;
  params.selStart = selStart;
  params.len = len;
  params.data = data;
  params.hint = (StringPtr) hint;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICParseURL */

pascal OSStatus ICCParseURL(ComponentInstance inst, ConstStr255Param hint, Ptr data, long len, long *selStart, long *selEnd, Handle url)
{
  return(ICParseURL((ICInstance)inst, hint, data, len, selStart, selEnd, url));
} /* ICCParseURL */

pascal OSStatus ICLaunchURL(ICInstance inst, ConstStr255Param hint, void const* data, long len, long *selStart, long *selEnd)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    long *selEnd;
    long *selStart;
    long len;
    void const* data;
    StringPtr hint;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 20;
  params.param_what = 17;
  /* routine specific assignments */
  params.selEnd = selEnd;
  params.selStart = selStart;
  params.len = len;
  params.data = data;
  params.hint = (StringPtr) hint;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICLaunchURL */

pascal OSStatus ICCLaunchURL(ComponentInstance inst, ConstStr255Param hint, Ptr data, long len, long *selStart, long *selEnd)
{
  return(ICLaunchURL((ICInstance)inst, hint, data, len, selStart, selEnd));
} /* ICCLaunchURL */

/* ***** Mappings Routines *****
 * 
 * Routines for interrogating mappings database.
 * 
 * ----- High Level Routines -----
 */

pascal OSStatus ICMapFilename(ICInstance inst, ConstStr255Param filename, ICMapEntry *entry)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICMapEntry *entry;
    StringPtr filename;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 8;
  params.param_what = 24;
  /* routine specific assignments */
  params.entry = entry;
  params.filename = (StringPtr) filename;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICMapFilename */

pascal OSStatus ICCMapFilename(ComponentInstance inst, ConstStr255Param filename, ICMapEntry *entry)
{
  return(ICMapFilename((ICInstance)inst, filename, entry));
} /* ICCMapFilename */

pascal OSStatus ICMapTypeCreator(ICInstance inst, OSType fType, OSType fCreator, ConstStr255Param filename, ICMapEntry *entry)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICMapEntry *entry;
    StringPtr filename;
    OSType fCreator;
    OSType fType;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 16;
  params.param_what = 25;
  /* routine specific assignments */
  params.entry = entry;
  params.filename = (StringPtr) filename;
  params.fCreator = fCreator;
  params.fType = fType;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICMapTypeCreator */

pascal OSStatus ICCMapTypeCreator(ComponentInstance inst, OSType fType, OSType fCreator, ConstStr255Param filename, ICMapEntry *entry)
{
  return(ICMapTypeCreator((ICInstance)inst, fType, fCreator, filename, entry));
} /* ICCMapTypeCreator */

/* ----- Mid Level Routines ----- */

pascal OSStatus ICMapEntriesFilename(ICInstance inst, Handle entries, ConstStr255Param filename, ICMapEntry *entry)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICMapEntry *entry;
    StringPtr filename;
    Handle entries;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 12;
  params.param_what = 28;
  /* routine specific assignments */
  params.entry = entry;
  params.filename = (StringPtr) filename;
  params.entries = entries;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICMapEntriesFilename */

pascal OSStatus ICCMapEntriesFilename(ComponentInstance inst, Handle entries, ConstStr255Param filename, ICMapEntry *entry)
{
  return(ICMapEntriesFilename((ICInstance)inst, entries, filename, entry));
} /* ICCMapEntriesFilename */

pascal OSStatus ICMapEntriesTypeCreator(ICInstance inst, Handle entries, OSType fType, OSType fCreator, ConstStr255Param filename, ICMapEntry *entry)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICMapEntry *entry;
    StringPtr filename;
    OSType fCreator;
    OSType fType;
    Handle entries;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 20;
  params.param_what = 29;
  /* routine specific assignments */
  params.entry = entry;
  params.filename = (StringPtr) filename;
  params.fCreator = fCreator;
  params.fType = fType;
  params.entries = entries;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICMapEntriesTypeCreator */

pascal OSStatus ICCMapEntriesTypeCreator(ComponentInstance inst, Handle entries, OSType fType, OSType fCreator, ConstStr255Param filename, ICMapEntry *entry)
{
  return(ICMapEntriesTypeCreator((ICInstance)inst, entries, fType, fCreator, filename, entry));
} /* ICCMapEntriesTypeCreator */

/* ----- Low Level Routines ----- */

pascal OSStatus ICCountMapEntries(ICInstance inst, Handle entries, long *count)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    long *count;
    Handle entries;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 8;
  params.param_what = 18;
  /* routine specific assignments */
  params.count = count;
  params.entries = entries;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICCountMapEntries */

pascal OSStatus ICCCountMapEntries(ComponentInstance inst, Handle entries, long *count)
{
  return(ICCountMapEntries((ICInstance)inst, entries, count));
} /* ICCCountMapEntries */

pascal OSStatus ICGetIndMapEntry(ICInstance inst, Handle entries, long ndx, long *pos, ICMapEntry *entry)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICMapEntry *entry;
    long *pos;
    long ndx;
    Handle entries;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 16;
  params.param_what = 19;
  /* routine specific assignments */
  params.entry = entry;
  params.pos = pos;
  params.ndx = ndx;
  params.entries = entries;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGetIndMapEntry */

pascal OSStatus ICCGetIndMapEntry(ComponentInstance inst, Handle entries, long ndx, long *pos, ICMapEntry *entry)
{
  return(ICGetIndMapEntry((ICInstance)inst, entries, ndx, pos, entry));
} /* ICCGetIndMapEntry */

pascal OSStatus ICGetMapEntry(ICInstance inst, Handle entries, long pos, ICMapEntry *entry)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICMapEntry *entry;
    long pos;
    Handle entries;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 12;
  params.param_what = 20;
  /* routine specific assignments */
  params.entry = entry;
  params.pos = pos;
  params.entries = entries;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICGetMapEntry */

pascal OSStatus ICCGetMapEntry(ComponentInstance inst, Handle entries, long pos, ICMapEntry *entry)
{
  return(ICGetMapEntry((ICInstance)inst, entries, pos, entry));
} /* ICCGetMapEntry */

pascal OSStatus ICSetMapEntry(ICInstance inst, Handle entries, long pos, ICMapEntry const *entry)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICMapEntry const *entry;
    long pos;
    Handle entries;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 12;
  params.param_what = 21;
  /* routine specific assignments */
  params.entry = entry;
  params.pos = pos;
  params.entries = entries;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICSetMapEntry */

pascal OSStatus ICCSetMapEntry(ComponentInstance inst, Handle entries, long pos, ICMapEntry *entry)
{
  return(ICSetMapEntry((ICInstance)inst, entries, pos, entry));
} /* ICCSetMapEntry */

pascal OSStatus ICDeleteMapEntry(ICInstance inst, Handle entries, long pos)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    long pos;
    Handle entries;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 8;
  params.param_what = 22;
  /* routine specific assignments */
  params.pos = pos;
  params.entries = entries;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICDeleteMapEntry */

pascal OSStatus ICCDeleteMapEntry(ComponentInstance inst, Handle entries, long pos)
{
  return(ICDeleteMapEntry((ICInstance)inst, entries, pos));
} /* ICCDeleteMapEntry */

pascal OSStatus ICAddMapEntry(ICInstance inst, Handle entries, ICMapEntry const *entry)
{
  struct {
    char param_flags;
    char param_size;
    short param_what;
    ICMapEntry const *entry;
    Handle entries;
    ICInstance inst;
  } params;

  /* some setup */
  params.param_flags = 0;
  params.param_size = 8;
  params.param_what = 23;
  /* routine specific assignments */
  params.entry = entry;
  params.entries = entries;
  /* do the work */
  params.inst = inst;
  return callComponentUPP(params.inst, (ComponentParameters*)&params);
} /* ICAddMapEntry */

pascal OSStatus ICCAddMapEntry(ComponentInstance inst, Handle entries, ICMapEntry *entry)
{
  return(ICAddMapEntry((ICInstance)inst, entries, entry));
} /* ICCAddMapEntry */

#endif


//
// internal methods
//
#pragma mark -

/*!
To call a component function using a user-defined
structure whose header matches a standard
component parameters structure, use this method.

(3.0)
*/
static pascal OSStatus
callComponentUPP	(ICInstance				UNUSED_ARGUMENT(inComponentInstance),
					 ComponentParameters*	inParamsPtr)
{
#if TARGET_API_MAC_OS8
	return (CallUniversalProc(CallComponentUPP, uppCallComponentProcInfo, inParamsPtr));
#else
	return CallComponentDispatch(inParamsPtr);
#endif
}// callComponentUPP


/* •••End PPC_ICAPI.c••• */

/* End of File */
