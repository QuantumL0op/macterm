<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">
<!--
	!!! WARNING !!
	
	The "encoding" in the header above is king; this file is UTF-8!
	In particular, if you include any fancy Macintosh font characters
	like curly quotes, etc. the XML file will NOT PARSE CORRECTLY.
	If "sdp" claims this file is not well formed XML, start by looking
	for non-UTF-8 characters.
-->

<!--
	ScriptingTerminology.sdef
	
	MacTerm
	(c) 1998-2012 by Kevin Grant
	
	This file defines MacTerm's AppleScript Dictionary.  Various codes
	used in this file come from AERegistry.h (in AE.framework in
	ApplicationServices.framework).
	
	The Script Editor will not recognize this on its own; you must use
	the Mac OS X program /Developer/usr/bin/sdp to process this XML file
	and generate Rez input out of it.  Then, link the resultant Rez
	input into the resource database of the application bundle.
	
	The Xcode project should do this automatically.  If you are not using
	Xcode, run "CreateASDictionaryRezInput.tcsh.command" from MacTerm's
	Tools directory.
-->

<!--
	The Basics
	
	See "man sdef" for detailed information, as well as "/Developer/Examples/Scripting Definitions".
	
	Here are other common things you might want to do:
	- for optional parameters or results, tack on the attribute: optional="optional"
	- to define a plural name for a class, tack on the attribute, e.g.: plural="this is the plural form"
-->

<!--
	A note on indentation style...
	
	You may think the indentation in this file is a little weird.  And
	you would be right.  But wait!  There are good reasons for it.
	
	Opening tags tend to have their attributes indented and on separate
	lines; this makes it easy to see all that is defined for a particular
	XML tag, and helps make more room for long description strings.  The
	ending bracket is also indented on its own line, to reduce the chance
	it will interfere with your eyes when scanning for clauses below.
	
	Name attributes are always listed first and broken across lines so
	that the string part is directly beneath the tag.  This is done so
	the name is *always* in a predictable location within a line, which
	makes it much easier to scan for a particular event or enumeration
	name, etc. (visual searches tend to be more efficient when the eyes
	do not have to move and you do not have to concentrate on filtering
	text in a line).
-->

<dictionary title="MacTerm dictionary">

	<suite name=
	"Required Suite"
		description="Terms used by all applications."
		code="reqd"
		>
		<!-- traditionally empty...apparently everyone is supposed to know what is in this suite -->
	</suite>
	
	<suite name=
	"Subset of the Internet Suite"
		description="Internet terms used by this application."
		code="gurl"
		>
		<events>
			<event name=
			"open location"
				description="open a connection to a domain specified in a uniform-resource-locator string"
				code="GURLGURL"
				>
				<result
					description="result code - 0 for success, 1 for failure"
					type="integer"
					optional="optional"
					/>
				<direct-parameter
					description="a string or list of strings in uniform-resource-locator format; if the URL can be handled, it will be; otherwise, an appropriate Internet helper application is launched; if that fails, 1 is returned"
					type="object"
					/>
			</event>
		</events>
	</suite>

</dictionary>

<!-- BELOW IS REQUIRED NEWLINE TO END FILE -->
